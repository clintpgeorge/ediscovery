#!/usr/bin/python
import os 
import wx
import numpy as np 
from wx.lib.masked import NumCtrl
from file_utils import read_config
from tm.lda_process_query import process_query, load_docs_info, load_lda_variables


#------------------------------------------------------------------------------------
# This file was generated by Image2PyFile.py
#------------------------------------------------------------------------------------
from wx.lib.embeddedimage import PyEmbeddedImage

Open_32_PNG = PyEmbeddedImage(
    "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAmVJ"
    "REFUWIXNlz1v00AYx3/xS+zYCVBYKKqgJROqOhQJmgGWKmtHhIRg7gfgC+QL8AGYg0DM7Cyl"
    "EmFAYmIKQgxVqVQhoSbn89kxQ+LKTRzntQn/LM7d+f4/3XPP47tcTtNZprTLmHS3Xol265Vo"
    "nLG5/hV4XXuc+eJ+7SA3yjz5/+OLz5njjbTG58/unz+/efu1v+2CQRIoNtfvtgAIf7js1itR"
    "FkTqCiQBhkAM9L0vKwBuPXRoizYATsHh6Ev3eRjEWHsgNo7N+vti883qKkXHpeSWKLklio7L"
    "ZnUVGAzNRABZEHuNBgBb1TUs06Jg2biOg+s4FCwby7TYqq4NhZgoC/pDEJtvPLgOYUQURuia"
    "jp23sPMWuqYThRGEUXdMCsTUaRibr6wbBFIh2h6+VHSCDlrv1wk6+L2+QCpW1o0BiNQsGEfF"
    "fJEz/4w/PwNOjFM6RojlFbj36CamZQKgpOL7p2OkLdACHTPIn787M8C77c2Btr1GA9uxCFSA"
    "lAopJACHT74NTcOpAYbJlwrpSaTw8Tw5cvyllOJJNPcVEC2B11uB02YwXSmeRnuNBne2r9Ju"
    "CTzPRwp/rOmXHoKlA8wlBHFRarcE0vNRvkIcm4sBiM1vlI1uxVMB3u9uwRm1AWHGEMTm1zY0"
    "hPBQvjo3f9ocbwVm/hZcuQ1SSNpHBvLEAuDDzg7QPVuMOmFNFIK088DfXwDmBWPIPkNMDZCc"
    "OGmWpkL5FaL5cuR8S0/D/xsgp9uLB9ivHeTijROF3uIB+iGm1TgbEDKyoHfhGHpHmJcy0zAN"
    "YtTVbK4ASYh5miY1cDVbtP4BMBQL9l9YAsoAAAAASUVORK5CYII="
    )
GetBitmap_Open_32_PNG = Open_32_PNG.GetBitmap

#----------------------------


Copy_32_PNG = PyEmbeddedImage(
    "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAbNJ"
    "REFUWIXtl09Kw0AUh38vSWMluBG6kBpc9ADiwkN4GXsQQaibLnoTD+EF1FWoQgV3LlKTPjfO"
    "OCbzL5NAF/ogtAnNm+998yaTEkUx9hmJ+MK7mrvcSFFMgwIAALMfAxGBdzUPAZE0LxDZcwpI"
    "ZgYR9YZoAfhaGAoi2MBQEL0MDAERbED3u5DGDDJg+o0LXheRLol6iLi4ecB0UXQewBUknoS8"
    "q9lU2cndKyKukKQxqm2N9TyXsF6DWKbFagAArm7vkY4Y2WyCg/wYSRpLE8zsPERxvQxMFwWy"
    "2USel8W7l4nv1SE/dSZaAM1kAsoFYa6Qfq2cJkRrCnQKAWA9z/Hx/CbPm9MhB7D0BTO3psO5"
    "CtSkLggV+nL16AXhNOBr4mz5Iq+dL5+wqTJjUcBPYzp7QAcI6HsCAKptjaj8RDlOsbk+NeYR"
    "/eBtwMcEACRpjOhojLiqtdU3C/TuAfVmW0+ISA9HxoKsAL4GVBNqqBCdDbiq1yXQ7Q8qhKsI"
    "uRt22UZFB4vB1WlohnbbViAo5LXc9tj2DbEKWu8DXZOEhArfC6Cvhd4A/wb+toHQ6tt59vz3"
    "/AuRMXpI0l6G7wAAAABJRU5ErkJggg=="
    )
GetBitmap_Copy_32_PNG = Copy_32_PNG.GetBitmap

#----------------------------


Cut_32_PNG = PyEmbeddedImage(
    "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAZRJ"
    "REFUWIXFVTFOxDAQXCO4GgnxhiBa/nEdruKCNogKUSFKKoTorkMUvsrNSeEBvABR3yvoD4ml"
    "II4Wx07WiWNGsmQnjne8O7MBmIjzi6tjstRksLA3lQAhoQEAELFMcSYDZwdkoQFAYwPIk4H3"
    "L7oae/MUJWDfdg4CnboLIdY5CYRSr7IRoIi9/VQC3to/vWzuchHI6XkvWt9T/yOiiDkkmQZo"
    "/RFRGGMWnO/2UxFooIRoE7AzxiyklDtnzx/tJHWBD5u3j0NwflKIWFr90AzooqqDotqulmuI"
    "8DcAgJTy2c5dwdqS2Xz1Bg+Q0JwO6HMK2ft7VlHVWFR1319Mkz3tM0f9LDQx9PX9wylAV4Sh"
    "FCsAKC1Z9zacfuBkSD3e3oCPQBQ4wd3A7nuXgPZtAlKa7WrZ+qyoajy5fLXa6ENQvFNE2JaD"
    "koqF7QNq6BauA6gWBgTcizHMg9ka0yuiEbCsz6YsTGnFKjDPRiAJOASOmvFvBGYFh8BnM1zo"
    "wDwKHBtakt82WEobju1gHRJz94DRrXYIP3Eu9Jfu15GbAAAAAElFTkSuQmCC"
    )
GetBitmap_Cut_32_PNG = Cut_32_PNG.GetBitmap

#----------------------------


Paste_32_PNG = PyEmbeddedImage(
    "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAgJJ"
    "REFUWIXNl71Lw0AYxp9La9oiLkIHKV1crVgHB0cXwUEoGUqp/gciBUehU8BFECoVB1ctoUNQ"
    "HASXjm6iaCc/llKECl1EFG0bh5JwTXPJ5aPUBwLJm9z7/vJc7iOECCGMU2HeB0/PKhrr3uZG"
    "nowcAADy2exQrFKteq3tHkAvls9mfRdmAmytpyytvlH2AADLud2hGKvN0eWjY9dYOrAyP2uc"
    "f8/lmI1pGACI1hXjvPbw6lSbDWBWPjfc9+ZYRfHWJYKnVgHK0YFoXUFFcXpq0P5AAfwkDwyA"
    "Fu/HFSiAJKsAALUoAQDKF/e8+S2HJxFCxvB0BJBkFYv7t2iJcTRlFbVMup9ZY87MtiJkcGqw"
    "BZBkFTOHbxDEOMJiCIlSA83zO5SpJOaEdrKCZgJIsoq1g2uIsRQiyXg/2GgjUWoMJPLqhC7m"
    "PKAWJVztrKLz0zVikeS04YQuQgj34QpAh2gWkvh8eWdCaJrGfbgG4IVgybcDvBBmkKWTJwDD"
    "7ngGcIKg3Vg4fkarMwkgQAecIAAYEO0PAV+/PQABO6BrO5O2hRCmogh1+iMncAd0EUKYEAAg"
    "xiYAjMgBWs1CcuCahtBBR+KALqthSEPwOOB6OTYXp7vBLPNbu1oLnGS230o864QlgJtNh9/V"
    "kHj5N9R6Xc3PfoDekPz/XTFLbqy3zzPm3/M/wVYENaoecsEAAAAASUVORK5CYII="
    )
GetBitmap_Paste_32_PNG = Paste_32_PNG.GetBitmap

#----------------------------


Save_32_PNG = PyEmbeddedImage(
    "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAj9J"
    "REFUWIXNls1u00AUhT/P2I7HkVBThFJ1gVKKilSEhNgSiQXZ8Arta3WTByBPEXbpBhYsEEJC"
    "ggQWJQKRQOrE8V/NokpIwHX+nLR3ZY/GPp/PmTtjqtWqUa1WDa6p9NFFqVCI1yHQ6na1VADT"
    "NOXoptnpZCq+t709c47IVHGJ0pMG5yGfVfO6mQiQdRRpdTMjgOVjWNS9KwE2FcPNjQA2E0Mq"
    "wCZi0IvF4lq24LkBkgYXtX4Vp659I0pdA2lVqZX/G6sfNbIBmBXBpEO37kLgB7htYwy1CMjS"
    "EdSPGlRqZXpfYWsvh7brE4UR3vcclVp5bgjhOE7sOM5SnTAS+dW8QCkLwzSwij6QHFFSrdwF"
    "zU6HSq3Mz08hdw4svKGPtnMZyf7JIa3j08UBFu2CURx2XiGlYCgF7Pi47dlrPNOz4Mvb39h5"
    "hZ23sPMWAM9fPk2NN7OzYBSFyiuEFEghEQcePz76qc9lfhaYOQMhNISUCCmAdIDxL3OpUIgX"
    "FUxa6U9elCCGMIgIvIAPjTae5SJCiRGa43mvjk81WKELJmFvP5bYlo2yLIIwQNd1dEMihMbD"
    "Z7t4Qw/P9XF6Lt1WOPWelRyAvy5sPQJb2aichZXLYegGQhPEUUwYhDiOS/NNZ+rrIYMuGG9G"
    "76DnnHM+6NN3Bwx9j+giQpMaSC1RHP5xYBWQ/ZNDANQDH1upcSSGrvO+/i1RfAogixr1vHnf"
    "vYRQNmevB1eKZw4wCSHv9Yk+51PF1wIQx3E82Z5p4gB/AF8v6tam65qxAAAAAElFTkSuQmCC"
    )
GetBitmap_Save_32_PNG = Save_32_PNG.GetBitmap

#----------------------------


Exit_32_PNG = PyEmbeddedImage(
    "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"
    "AAAAAElFTkSuQmCC"
    )
GetBitmap_Exit_32_PNG = Exit_32_PNG.GetBitmap

#----------------------------


Info_32_PNG = PyEmbeddedImage(
    "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"
    "8jjZs4gAAAAASUVORK5CYII="
    )
GetBitmap_Info_32_PNG = Info_32_PNG.GetBitmap

#------------------------------------------------------------------------------------



class SMARTeRGUI(wx.Frame):
    '''
    EDiscovery SMART Ranking tool GUI 
    '''
  
    def __init__(self, *args, **kwargs):
        super(SMARTeRGUI, self).__init__(*args, **kwargs) 
        
        # Initialize the class variables 
        self.mdl_file_name = ''
        self.mdl_dir = ''
        self.mdl_cfg = {} 
        self.SEEDCONSTANT = 2013 
        self.tm_index_available = False  
        self.lucene_index_available = False  
        
        self._init_GUI()
        
        
        
    def _init_GUI(self):   
        '''Initializes basic GUI controls 
        
        '''

        # A StatusBar in the bottom of the window
        self.CreateStatusBar() 

        # Menu bar 

        menu_bar = self._create_menu_bar()
        self.SetMenuBar(menu_bar)  # Adding the MenuBar to the Frame content.

        # Tool bar 

        icon_tool_bar = self._create_icon_toolbar()
        
        sizer_mdl_box = self._create_mdl_loader_panel()
        
        sizer_query_box = self._create_search_panel()
        
        
        # Adding a panel sizer 
        
        sizer_main = wx.BoxSizer( wx.VERTICAL ) 
        sizer_main.Add(icon_tool_bar, proportion=0, flag=wx.EXPAND)
        sizer_main.Add(sizer_mdl_box, 0, wx.EXPAND | wx.ALL, border=5)
        sizer_main.Add(sizer_query_box, 0, wx.EXPAND | wx.ALL, border=5)
        
        sizer_main.Add(wx.StaticText(self, label="Responsive documents "), 0, wx.EXPAND | wx.ALL, border=5)
        sizer_main.Add(wx.StaticLine(self), 0, wx.EXPAND | wx.ALL, border=5)
        self.tbx_search_results = wx.TextCtrl(self, style=wx.TE_BESTWRAP, size=(400, 200))
        self.tbx_search_results.SetEditable(False)
        self.tbx_search_results.SetValue('No records found.')
        sizer_main.Add(self.tbx_search_results, 0, wx.EXPAND | wx.ALL, border=5)
        
        self.SetSizerAndFit(sizer_main)
                
        # Handles the basic window events 
        
        self.Bind(wx.EVT_CLOSE, self._on_quit)
        
        # Sets the window properties 
        
        self.SetSize((1024, 768))
        self.SetTitle('SMARTeR')
        self.Centre()
        self.Show(True)
        
    def _create_mdl_loader_panel(self):
        '''Initializes the model loader panel 
        '''
        
        mdl_sb = wx.StaticBox(self, label="Model details", size=(300, -1))
        sizer_mdl_box = wx.StaticBoxSizer(mdl_sb, wx.VERTICAL)
        grd_sizer_info = wx.GridBagSizer(5, 4)
        
        self.tbx_model_cfg_path = wx.TextCtrl(self, style=wx.TE_BESTWRAP, size=(400, -1))
        self.tbx_model_cfg_path.SetEditable(False)
        self.tbx_model_cfg_path.SetValue(self.mdl_dir)
        btn_select_mdl = wx.BitmapButton(self, wx.ID_OPEN, bitmap=Open_32_PNG.GetBitmap())
        btn_select_mdl.SetToolTip( wx.ToolTip("Select a model") )
        self.Bind(wx.EVT_BUTTON, self._on_select_model, btn_select_mdl)
        
        grd_sizer_info.Add(wx.StaticText(self, label="Model file"), pos=(0, 0), flag=wx.TOP|wx.LEFT|wx.BOTTOM, border=5)
        grd_sizer_info.Add(self.tbx_model_cfg_path, pos=(0, 1), flag=wx.TOP|wx.LEFT|wx.BOTTOM, border=5)
        grd_sizer_info.Add(btn_select_mdl, pos=(0, 2), flag=wx.TOP|wx.LEFT|wx.BOTTOM, border=5)
        
        self.lbl_topic_mdl_exists = wx.StaticText(self, label="NA")
        grd_sizer_info.Add(wx.StaticText(self, label="Topic model index: "), pos=(1, 0), flag=wx.TOP|wx.LEFT|wx.BOTTOM, border=5)
        grd_sizer_info.Add(self.lbl_topic_mdl_exists, pos=(1, 1), flag=wx.TOP|wx.LEFT|wx.BOTTOM|wx.RIGHT, border=5)
        
        grd_sizer_info.Add(wx.StaticText(self, label="Number of files: "), pos=(2, 0), flag=wx.TOP|wx.LEFT|wx.BOTTOM, border=5)
        self.lbl_num_corpus_files = wx.StaticText(self, label="NA")
        grd_sizer_info.Add(self.lbl_num_corpus_files, pos=(2, 1), flag=wx.TOP|wx.LEFT|wx.BOTTOM|wx.RIGHT, border=5)
        
        grd_sizer_info.Add(wx.StaticText(self, label="Vocabulary size: "), pos=(3, 0), flag=wx.TOP|wx.LEFT|wx.BOTTOM, border=5)
        self.lbl_vocab_size = wx.StaticText(self, label="NA")        
        grd_sizer_info.Add(self.lbl_vocab_size, pos=(3, 1), flag=wx.TOP|wx.LEFT|wx.BOTTOM|wx.RIGHT, border=5)
        
        self.lbl_lucene_mdl_exists = wx.StaticText(self, label="NA")
        grd_sizer_info.Add(wx.StaticText(self, label="Lucene index: "), pos=(1, 2), flag=wx.TOP|wx.LEFT|wx.BOTTOM, border=5)
        grd_sizer_info.Add(self.lbl_lucene_mdl_exists, pos=(1, 3), flag=wx.TOP|wx.LEFT|wx.BOTTOM, border=5)
        
        sizer_mdl_box.Add(grd_sizer_info, 0, wx.ALL, 5)
        
        return sizer_mdl_box
    
    
    def _create_search_panel(self):
        '''Initializes the search panel 
        '''
        
        search_sb = wx.StaticBox(self, label="Search", size=(300, -1))
        sizer_query_box = wx.StaticBoxSizer(search_sb, wx.VERTICAL)
        grd_sizer_query = wx.GridBagSizer(2, 3)

        self.tbx_search_query = wx.TextCtrl(self, style=wx.TE_BESTWRAP, size=(400, -1))
        btn_search_query = wx.Button(self, -1, label='Search')
        btn_search_query.SetToolTip( wx.ToolTip("Search query") )
        self.Bind(wx.EVT_BUTTON, self._on_search, btn_search_query)
        
        grd_sizer_query.Add(wx.StaticText(self, label="Search query"), pos=(0, 0), flag=wx.TOP|wx.LEFT|wx.BOTTOM, border=5)
        grd_sizer_query.Add(self.tbx_search_query, pos=(0, 1), flag=wx.EXPAND|wx.TOP|wx.LEFT|wx.BOTTOM, border=5)
        grd_sizer_query.Add(btn_search_query, pos=(0, 2), flag=wx.TOP|wx.LEFT|wx.BOTTOM, border=5)

        self.chbx_topic_model = wx.CheckBox(self, label='Topic modeling')
        self.chbx_filter_attributes = wx.CheckBox(self, label='Lucene search')
        grd_sizer_query.Add(wx.StaticText(self, label="Search options"), pos=(1, 0), flag=wx.TOP|wx.LEFT|wx.BOTTOM, border=5)
        grd_sizer_query.Add(self.chbx_topic_model, pos=(1, 1), flag=wx.TOP|wx.LEFT|wx.BOTTOM, border=5)
        grd_sizer_query.Add(self.chbx_filter_attributes, pos=(1, 2), flag=wx.TOP|wx.LEFT|wx.BOTTOM|wx.RIGHT, border=5)
        
        grd_sizer_query.Add(wx.StaticText(self, label="Responsive documents limit"), pos=(2, 0), flag=wx.TOP|wx.LEFT|wx.BOTTOM, border=5)
        self.tbx_resp_doc_limit = wx.lib.masked.NumCtrl(self, size=(20,1), fractionWidth=0, integerWidth=5, allowNegative=False, min=1, max=9999, value=100) 
        grd_sizer_query.Add(self.tbx_resp_doc_limit, pos=(2, 1), flag=wx.TOP|wx.LEFT|wx.BOTTOM, border=5)

        sizer_query_box.Add(grd_sizer_query, 0, wx.ALL, 5)
        
        return sizer_query_box
        
        
    def _create_menu_bar(self):
        '''Creates the menu bar 
        '''
        
        # Setting up the menu.
        menu_file = wx.Menu()
        mitem_open = menu_file.Append(wx.ID_OPEN, "&Open"," Open a file to edit")
        mitem_about = menu_file.Append(wx.ID_ABOUT, "&About"," Information about this program")
        mitem_exit = menu_file.Append(wx.ID_EXIT,"E&xit"," Terminate the program")

        # Creating the menubar.
        menu_bar = wx.MenuBar()
        menu_bar.Append(menu_file,"&File") # Adding the "menu_file" to the MenuBar

        # Set events.
        self.Bind(wx.EVT_MENU, self._on_select_model, mitem_open)
        self.Bind(wx.EVT_MENU, self._on_about, mitem_about)
        self.Bind(wx.EVT_MENU, self._on_quit, mitem_exit)    


        return menu_bar

        
    def _on_quit(self, e):
        '''Handles the application termination signal 
        '''
        
        dlg = wx.MessageDialog(self,
                               "Do you really want to close this application?",
                               "Confirm Exit", wx.OK|wx.CANCEL|wx.ICON_QUESTION)
        result = dlg.ShowModal()
        dlg.Destroy()
        if result == wx.ID_OK:
            self.Destroy()


    def _on_about(self, e):
        '''Displays the application basic information 
        '''
        # A message dialog box with an OK button
        dlg = wx.MessageDialog( self, "SMARTeR", "About SMART eDiscovery ranking", wx.OK)
        dlg.ShowModal() # Show it
        dlg.Destroy() # finally destroy it when finished.



    def _on_search(self, e):
        '''Handles the search query button click event  
        '''
        
        if self.tm_index_available or self.lucene_index_available:
            query = self.tbx_search_query.GetValue()
            self.resp_docs_limit = int(self.tbx_resp_doc_limit.GetValue())
            
            if query.strip() == '':
                # error 
                dlg = wx.MessageDialog(self, 'Please enter a search query.', 'Search query missing!', wx.OK|wx.ICON_INFORMATION)
                dlg.ShowModal()
                dlg.Destroy()
                return 
            
            print 'Performing query processing...'
            responsive_docs, non_responsive_docs = process_query(query, self.lda_dictionary, self.lda_mdl, self.lda_index, self.lda_doc_paths, self.resp_docs_limit)
            
            print len(responsive_docs), len(non_responsive_docs) 
            
            rd = np.array(responsive_docs)
            rd_paths = [os.path.join(dir_path, rd[idx,2]) for idx, dir_path in enumerate(rd[:,1])] # looks like i'm not getting full file paths
            results_str = ', '.join(rd_paths)
            self.tbx_search_results.SetValue(results_str)
            
        else: 
            # error 
            dlg = wx.MessageDialog(self, 'You have to load the model to perform a search.', 'Select a model!', wx.OK|wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()
        

    def _on_select_model(self, e):
        '''Handles the select model button click event. Loads a model file 
        '''
        dlg = wx.FileDialog(self, "Choose a file", self.mdl_dir, "", "*.*", wx.OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            self.mdl_file_name = dlg.GetFilename()
            self.mdl_dir = dlg.GetDirectory()
            self.tbx_model_cfg_path.SetValue(os.path.join(self.mdl_dir, self.mdl_file_name))
            self._load_model(os.path.join(self.mdl_dir, self.mdl_file_name))

        dlg.Destroy()

    def _load_model(self, model_cfg_file):
        '''Loads the models specified in the model configuration file  
        '''
        
        self.mdl_cfg = read_config(model_cfg_file)
        
        # Loads LDA model files 
        
        dictionary_file = self.mdl_cfg['LDA']['dict_file']
        doc_paths_file = self.mdl_cfg['LDA']['file_paths_file']
        lda_mdl_file = self.mdl_cfg['LDA']['lda_model_file']
        lda_index_file = self.mdl_cfg['LDA']['lda_index_file']
        
        if dictionary_file <> None and doc_paths_file <> None and lda_mdl_file <> None and lda_index_file <> None: 
            if os.path.exists(dictionary_file) and os.path.exists(doc_paths_file) and os.path.exists(lda_mdl_file) and os.path.exists(lda_index_file):
                # Loads the LDA model and file details 
                self.lda_doc_paths = load_docs_info(doc_paths_file)
                self.lda_dictionary, self.lda_mdl, self.lda_index = load_lda_variables(dictionary_file, lda_mdl_file, lda_index_file)
                self.lda_num_files = len(self.lda_doc_paths)
                self.lda_vocab_size = len(self.lda_dictionary)        
                
                self.lbl_topic_mdl_exists.SetLabel("Yes")
                self.tm_index_available = True                 
                self.lbl_num_corpus_files.SetLabel(str(self.lda_num_files))
                self.lbl_vocab_size.Setlabel(str(self.lda_vocab_size))

        
        # Loads Lucene index files 
        self.lucene_index_file = self.mdl_cfg['LUCENE']['lucene_index_file']
        
        if self.lucene_index_file <> None:
            if os.path.exists(self.lucene_index_file): 
                self.lbl_lucene_mdl_exists.SetLabel("Yes")
                self.lucene_index_available = True  
         
        self.SetStatusText("The %s model is loaded." % self.mdl_cfg['DATA']['name'])


    def _create_icon_toolbar(self):
        '''Initializes the icon toolbar control 
        '''

        toolbar = wx.ToolBar(self, -1)

        # Open file

        open_file_id = wx.NewId()
        tool = toolbar.AddLabelTool(open_file_id, label='Open File', bitmap=Open_32_PNG.GetBitmap())
        tool.SetLabel('Open')
        self.Bind( wx.EVT_TOOL, self._on_select_model, id=open_file_id )

        toolbar.AddSeparator()

        # EXIT the application 

        exit_app_id = wx.NewId()
        tool = toolbar.AddLabelTool(exit_app_id, label='Exit', bitmap=Exit_32_PNG.GetBitmap())
        tool.SetLabel('Exit')
        self.Bind(wx.EVT_TOOL, self._on_quit, id=exit_app_id)

        toolbar.Realize()

        return toolbar


def main():
    '''
    The main function call 
    '''
    
    # read application configurations 
    
#    CONFIG_FILE_NAME = 'smart_er_gui.ini'
#    app_config = read_config(CONFIG_FILE_NAME)
#    model_config_file = app_config['APP_CONFIG']['model_config_file'] 

    ex = wx.App()
    SMARTeRGUI(None)
    ex.MainLoop()    


if __name__ == '__main__':
    
    main()
    
    

